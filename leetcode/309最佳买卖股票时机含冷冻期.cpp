/*
    给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​

    设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:

    你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
    卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
    示例:

    输入: [1,2,3,0,2]
    输出: 3 
    解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]

*/
/*
    这个问题的之前有几个版本 最简单那个版本是无冷冻期的 这些版本都可以用dp的思想来解决
    如果没有冷冻期的话。整个任务为了获取最大收益，可以认为所有的股票当天买入，第二天就卖出，只要收益是正的
    就进行这一笔交易，

    在存在冷冻期时，依旧采用动态规划的思想
    状态转移方程：

    有人从状态机的角度来解释这一问题 
    状态s0：表示非冷冻期时手中没有股票
    状态s1：表示手中有股票
    状态s2：表示在冷冻期，手中没有股票
    动作集合有[无操作，购买，卖出]
*/
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.empty())
            return 0;
        vector<int> s0(prices.size(), 0);
        vector<int> s1(prices.size(), 0);
        vector<int> s2(prices.size(), 0);
        // 三个状态的初始情况
        s0[0]=0;  //没有收益
        s1[0]=-prices[0];   //在一开始手里有一支股票， 花钱买了这支股票
        s2[0]=0;
        for(int i=1;i<prices.size();i++)
        {
            //更新当前状态的值
            s0[i]=max(s0[i-1], s2[i-1]);
            s1[i]=max(s0[i-1]-prices[i], s1[i-1]);
            s2[i]=s1[i-1]+prices[i];
        }
        // 最后的收益会时，手中一定没有股票，因为如果有股票但是没有卖出的话，情况和一直没买结果收益是一样的
        return max(s0[prices.size()-1], s2[prices.size()-1]);
    }
};