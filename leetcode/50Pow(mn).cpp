/*
    实现 pow(x, n) ，即计算 x 的 n 次幂函数。
    示例 1:
    输入: 2.00000, 10
    输出: 1024.00000
    示例 2:
    输入: 2.10000, 3
    输出: 9.26100
    示例 3:
    输入: 2.00000, -2
    输出: 0.25000
    解释: 2-2 = 1/22 = 1/4 = 0.25
*/

/*
    正常相乘n个数需要o(n)的复杂度，但是其实观察x的n次幂就会发现  其是由x的n/2次幂得到的，x的n/2次幂又是由n/4次幂得到的，以此类推可以得到一个
    O(logn)的方法，  当结果特别大的时候可能溢出，但是此题中似乎没有这样的问题。
    具体的情况下 需要区分n的奇偶，如果是奇数，
*/

class Solution {
public:
    double myPow(double x, int n) {
        if(x==0.0)
            return 0.0;
        if(x==1.0)
            return 1.0;
        double result=1.0;  // 0次方等于1.0
        for(int i=n;i!=0;i/=2)
        {
            // 其实相当于 x^2^2^2......  在奇数的情况下额外乘上一次
            if(i%2!=0)
            {
                result *= x;
            }
            x *= x;
        }
        return n>0?result:1.0/result;
    }
};