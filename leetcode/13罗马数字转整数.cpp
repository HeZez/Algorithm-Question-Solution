/*
    通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，  所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：

    I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
    X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
    C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
    给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。

    示例 1:

    输入: "III"
    输出: 3
    示例 2:

    输入: "IV"
    输出: 4
    示例 3:

    输入: "IX"
    输出: 9
    示例 4:

    输入: "LVIII"
    输出: 58
    解释: L = 50, V= 5, III = 3.
    示例 5:

    输入: "MCMXCIV"
    输出: 1994
    解释: M = 1000, CM = 900, XC = 90, IV = 4.

*/

/*
    最开始的方法是去判断，如果当前字符是I X C 去看下一个字符，也就是要判断两个连着的字符，来处理特殊情况，
    这样的话要考虑的情况很多，很复杂
    
    评论区大佬是这样实现的，看一下构成罗马数字的规律，之后逐位判断
    正常情况下罗马数字的大数在左边，特例的几种情况4 9等，是小数在左边的
    可以根据这个规律，比如IV 是小的在左面 于是可以-1+5=4，采用这样的方式进行计算即可
*/
class Solution {
public:
    int romanToInt(string s) {
        map<char, int> m1;
        m1['I']=1;
        m1['V']=5;
        m1['X']=10;
        m1['L']=50;
        m1['C']=100;
        m1['D']=500;
        m1['M']=1000;
        int len=s.size();
        int result=0;
        for(int i=0;i<len-1; i++)
        {
            if(m1[s[i]] >= m1[s[i+1]])
                result+=m1[s[i]];
            else
                result-=m1[s[i]];
        }
        // 不要忘了 最后一个字符没有处理，只要加上即可
        result+=m1[s[len-1]];
        return result;
    }
};