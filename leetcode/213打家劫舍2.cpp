/*
    你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

示例 1:

输入: [2,3,2]
输出: 3
解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。
示例 2:

输入: [1,2,3,1]
输出: 4
解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
     偷窃到的最高金额 = 1 + 3 = 4 。
*/
/*
    两种情况，偶数个房间的情况比较简单，就是下标全奇数或者全偶数两种情况
    
    奇数个房间的情况比较复杂
    有三种情况：举个例子
    1 2 3 4 5
    可以选 2 4 或者1 3 或者 3 5 这样的三种情况
    这样的三种情况其实就是 全偶数房间是一种  全奇数房间去头是一种，去尾是一种
    
    但是我的想法直接实现有些问题， 还是要用动态规划来解
    核心想法就是第一个元素和最后一个元素
    看了大佬的做法就是用两个dp数组记录结果，一个是去掉第一个元素后的结果，另一个是去掉最后一个元素后的结果
    
*/
class Solution {
public:
    int rob(vector<int>& nums) {
        if(nums.empty()) return 0;
        if(nums.size()==1) return nums[0];
        int length=nums.size();
        vector<int> dp1(length+1,0);     // 去掉最后一位的结果
        vector<int> dp2(length+1,0);    // 去掉第一位的结果
        for(int i=2;i<length+1;i++)
        {
            dp1[i]=max(dp1[i-1], dp1[i-2]+nums[i-2]);
            dp2[i]=max(dp2[i-1], dp2[i-2]+nums[i-1]);
        }
        return max(dp1[length], dp2[length]);
    }
};