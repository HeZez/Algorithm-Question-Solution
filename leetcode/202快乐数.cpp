/*
    编写一个算法来判断一个数是不是“快乐数”。
    一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。
    
    示例: 
    输入: 19
    输出: true
    解释: 
    1^2 + 9^2 = 82
    8^2 + 2^2 = 68
    6^2 + 8^2 = 100
    1^2 + 0^2 + 0^2 = 1
*/
/*
    如果按照快乐数本身的定义，怎样才能确定是无限循环的情况，也就是不是快乐数呢？
    在是快乐数的情况下，用一个vector来存每一位的数之后算平方和就行
    或者map，只有当map里只有1个1和若干个0的时候，才是快乐数
    怎样判断不是快乐数？
    
    (1)算的平方和中出现重复的值得时候，说明其陷入了一个循环当中，就不是快乐数了。
    (2)或者根据百度百科的内容:
    “不是快乐数的数称为不快乐数（unhappy number），所有不快乐数的数位平方和计算，最後都会进入 4 → 16 → 37 → 58 → 89 → 
    145 → 42 → 20 → 4 的循环中。”
    第一种方法可能是此题的本意
*/

class Solution {
public:
    map<int,int> flag;
    bool isHappy(int n) {
        if(flag[n]>1)
            return false; // 这个数出现过，陷入循环了
        if(n==1)
            return true;
        flag[n]++;
        int sum=0;
        while(n!=0)
        {
            sum+=(n%10)*(n%10);
            n/=10;
        }
        return isHappy(sum);
    }
};