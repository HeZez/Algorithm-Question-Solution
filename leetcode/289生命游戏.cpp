/*
    根据百度百科，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。

    给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞具有一个初始状态 live（1）即为活细胞， 或 dead（0）即为死细胞。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：

    如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
    如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
    如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
    如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
    根据当前状态，写一个函数来计算面板上细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。

    示例:

    输入: 
    [
      [0,1,0],
      [0,0,1],
      [1,1,1],
      [0,0,0]
    ]
    输出: 
    [
      [0,0,0],
      [1,0,1],
      [0,1,1],
      [0,1,0]
    ]
    进阶:

    你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。
    本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？
*/
/*
    如果采用非原地的方法，可以用一个新的二维数组记录更新后的值，之后再把值更新到原数组上，这样的方法很直接，
    只需要注意在边界上的特殊情况即可
    
    但是题目要求原地算法，同时还要考虑活细胞占领边界的问题
    首先思考一下 活细胞侵占面板边界会有什么问题？
    
    如果不想考虑太多特殊情况， 可以考虑padding一圈
    不然就考虑多种情况
    原地算法的话 看到的一个比较好的解法是使用二进制前两位来记录结果  右数第一位当前状态 第二位下一状态
    这样就可以用右移的方式更新

*/
class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        if(board.empty()||board[0].empty())
            return ;
        int count=0;
        for(int i=0;i<board.size(); i++)
        {
            for(int j=0;j<board[0].size();j++)
            {
                count=countLive(board, i, j);
                // cout<<count<<",";
                if( board[i][j]&1 )
                {
                    if(count==2||count==3)
                        board[i][j]=3;
                }
                else
                {
                    if(count==3)
                        board[i][j]=2;
                } 
            }
        }
        
        for(int i=0;i<board.size(); i++)
        {
            for(int j=0;j<board[0].size();j++)
            {
                board[i][j] >>= 1;
            }
        }
        

    }
    int countLive(vector<vector<int>>& board, int m, int n)
    {
        int count=0, a=board.size(), b=board[0].size();
        for(int i=max(m-1, 0); i<min(a, m+2); i++)
        {
            for(int j=max(n-1, 0); j<min(b, n+2); j++)
            {
                if(i==m&&j==n)
                    continue;
                count+=(board[i][j]&1);

            }
        }
        return count;
    }
};