/*
    我们正在玩一个猜数游戏，游戏规则如下：

    我从 1 到 n 之间选择一个数字，你来猜我选了哪个数字。

    每次你猜错了，我都会告诉你，我选的数字比你的大了或者小了。

    然而，当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。直到你猜到我选的数字，你才算赢得了这个游戏。

    示例:
    n = 10, 我选择了8.

    第一轮: 你猜我选择的数字是5，我会告诉你，我的数字更大一些，然后你需要支付5块。
    第二轮: 你猜是7，我告诉你，我的数字更大一些，你支付7块。
    第三轮: 你猜是9，我告诉你，我的数字更小一些，你支付9块。

    游戏结束。8 就是我选的数字。

    你最终要支付 5 + 7 + 9 = 21 块钱。
    给定 n ≥ 1，计算你至少需要拥有多少现金才能确保你能赢得这个游戏。
*/
/*
    如果这种问题没有的代价的限制，那么应该使用二分法
    但是当存在代价时，有一个类似的表述是，最少用几个鸡蛋才能测试出鸡蛋从几楼扔下去不会碎
    这样的问题就变成了动态规划
    dp[i][j]表示从i到j之间的数字 被猜中的最小代价
    状态转移方程 dp[i][j]=max(dp[i][x-1], dp[i][x+1])+x  x从i到j
    这里为什么是max呢 因为题目要求是至少要求有多少现金
    ，那么也就要求在最优策略下，最坏情况的代价是多少，所以是Max
*/
class Solution {
public:
    int getMoneyAmount(int n) {
        vector<vector<int> > dp(n+2, vector<int>(n+2, 0));   // 这里使用n+2是为了处理边界的情况 因为在下面会出现x-1 x+1的时候 
        
        // 这是个三重循环  效率不高
        for(int i=n;i>=1;i--)
        {
            for(int j=i;j<=n;j++)
            {
                if(i==j)
                    dp[i][j]=0;
                else
                {
                    dp[i][j]=INT_MAX;
                    for(int x=i;x<=j;x++)
                        dp[i][j]=min(dp[i][j], max(dp[i][x-1], dp[x+1][j])+x);
                }
            }
        }
        return dp[1][n];
    }
};