/*
    给定一个整数，写一个函数来判断它是否是 3 的幂次方。

    示例 1:

    输入: 27
    输出: true
    示例 2:

    输入: 0
    输出: false
    示例 3:

    输入: 9
    输出: true
    示例 4:

    输入: 45
    输出: false
    进阶：
    你能不使用循环或者递归来完成本题吗？
*/
/*
    可以使用递归和循环的话 多次除 之后判断就好了
    如果不能用循环和递归 可能是O(1)时间复杂度即可判断出来结果

    哈哈哈哈 看了评论区 由于不能递归和循环 大家全都转向查表了
    看到一个比较靠谱的解法是和数论相关的
    因为是一个32位Int 能表示的最大的3的幂次是3的19次幂 1162261467
    如果一个数是3的幂次结果n，由于1162261467的因子只有3 所以1162261467对n求余一定为0  其他的非3幂次数 求余不会为0
*/
class Solution {
public:
    bool isPowerOfThree(int n) {
        return n>0 && 1162261467%n==0;
    }
};